name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * 1' # Weekly (Mon 06:00 UTC)
  workflow_dispatch:

jobs:
  lint:
    name: Lint (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            module_path: ~/.local/share/powershell/Modules
          - os: macos-latest
            module_path: ~/.local/share/powershell/Modules
          - os: windows-latest
            module_path: ~\\Documents\\PowerShell\\Modules
    steps:
      - uses: actions/checkout@v3
      - name: Cache PowerShell modules
        uses: actions/cache@v4
        with:
          path: ${{ matrix.module_path }}
          key: ${{ runner.os }}-psmodules-v2-pssa-1.22.0
          restore-keys: |
            ${{ runner.os }}-psmodules-
      - name: Trust PSGallery and bootstrap
        shell: pwsh
        run: |
          $ErrorActionPreference = 'SilentlyContinue'
          if (Get-Command Set-PSResourceRepository -ErrorAction SilentlyContinue) {
            try { Set-PSResourceRepository -Name PSGallery -Trusted -ErrorAction SilentlyContinue } catch {}
          } elseif (Get-Command Set-PSRepository -ErrorAction SilentlyContinue) {
            try { Set-PSRepository -Name PSGallery -InstallationPolicy Trusted -ErrorAction SilentlyContinue } catch {}
          }
          if (Get-Command Install-PackageProvider -ErrorAction SilentlyContinue) {
            try { Install-PackageProvider -Name NuGet -Scope CurrentUser -Force -ErrorAction SilentlyContinue | Out-Null } catch {}
          }
          exit 0
      - name: Install PSScriptAnalyzer
        run: pwsh -c "Install-Module -Name PSScriptAnalyzer -RequiredVersion 1.22.0 -Scope CurrentUser -Force -Repository PSGallery -AcceptLicense"
      - name: Run PSScriptAnalyzer
        run: pwsh -c "Invoke-ScriptAnalyzer -Path . -Recurse"

  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            module_path: ~/.local/share/powershell/Modules
          - os: macos-latest
            module_path: ~/.local/share/powershell/Modules
          - os: windows-latest
            module_path: ~\\Documents\\PowerShell\\Modules
    steps:
      - uses: actions/checkout@v3
      - name: Cache PowerShell modules
        uses: actions/cache@v4
        with:
          path: ${{ matrix.module_path }}
          key: ${{ runner.os }}-psmodules-v2-pester-5.7.1
          restore-keys: |
            ${{ runner.os }}-psmodules-
      - name: Trust PSGallery and bootstrap
        shell: pwsh
        run: |
          $ErrorActionPreference = 'SilentlyContinue'
          if (Get-Command Set-PSResourceRepository -ErrorAction SilentlyContinue) {
            try { Set-PSResourceRepository -Name PSGallery -Trusted -ErrorAction SilentlyContinue } catch {}
          } elseif (Get-Command Set-PSRepository -ErrorAction SilentlyContinue) {
            try { Set-PSRepository -Name PSGallery -InstallationPolicy Trusted -ErrorAction SilentlyContinue } catch {}
          }
          if (Get-Command Install-PackageProvider -ErrorAction SilentlyContinue) {
            try { Install-PackageProvider -Name NuGet -Scope CurrentUser -Force -ErrorAction SilentlyContinue | Out-Null } catch {}
          }
          exit 0
      - name: Install Pester
        run: pwsh -c "Install-Module -Name Pester -RequiredVersion 5.7.1 -Scope CurrentUser -Force -Repository PSGallery -AcceptLicense"
      - name: Run Pester tests
        run: pwsh -c "Invoke-Pester -Path tests"

  latest:
    name: Latest Modules (${{ matrix.os }})
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Trust PSGallery and bootstrap
        shell: pwsh
        run: |
          $ErrorActionPreference = 'SilentlyContinue'
          if (Get-Command Set-PSResourceRepository -ErrorAction SilentlyContinue) {
            try { Set-PSResourceRepository -Name PSGallery -Trusted -ErrorAction SilentlyContinue } catch {}
          } elseif (Get-Command Set-PSRepository -ErrorAction SilentlyContinue) {
            try { Set-PSRepository -Name PSGallery -InstallationPolicy Trusted -ErrorAction SilentlyContinue } catch {}
          }
          if (Get-Command Install-PackageProvider -ErrorAction SilentlyContinue) {
            try { Install-PackageProvider -Name NuGet -Scope CurrentUser -Force -ErrorAction SilentlyContinue | Out-Null } catch {}
          }
          exit 0
      - name: Install latest PSScriptAnalyzer
        run: pwsh -c "Install-Module -Name PSScriptAnalyzer -Scope CurrentUser -Force -Repository PSGallery -AcceptLicense"
      - name: Install latest Pester
        run: pwsh -c "Install-Module -Name Pester -Scope CurrentUser -Force -Repository PSGallery -AcceptLicense"
      - name: Lint with latest
        run: pwsh -c "Invoke-ScriptAnalyzer -Path . -Recurse"
      - name: Test with latest
        run: pwsh -c "Invoke-Pester -Path tests"
